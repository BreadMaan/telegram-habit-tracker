import logging
import asyncio
import datetime
import re
import os
import random
import pytz
from database import init_db, add_user, sign_agreement, add_temptation, add_habit, get_user_profile, get_todays_tasks, set_wakeup_time, get_wakeup_time, update_balance, update_streak, update_max_streak, set_status, increment_fail_count, get_user_balance, set_award, get_all_users, set_day_off, get_day_off, get_user_habits, delete_habit, get_user_temptations, delete_temptation, normalize_text, set_notifications, get_notifications, set_control_mode, get_control_mode, set_control_failed, get_control_failed, set_challenges_enabled, get_challenges_enabled, get_challenge_assigned_date, set_challenge_assigned_date
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiohttp import web
from config import BOT_TOKEN
from apscheduler.schedulers.asyncio import AsyncIOScheduler


bot = Bot(token=BOT_TOKEN)
#scheduler = AsyncIOScheduler()
scheduler = AsyncIOScheduler(timezone=pytz.timezone("Europe/Moscow"))


logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫)
pending_checks = {}  # –ö–ª—é—á: user_id, –∑–Ω–∞—á–µ–Ω–∏–µ: True (–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º")]],
    resize_keyboard=True
)

sign_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")]],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏")],
        [KeyboardButton(text="–ó–æ–Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è 
profile_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú–∞–≥–∞–∑–∏–Ω"), KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é ¬´–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏¬ª
my_habits_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é ¬´–ó–æ–Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞¬ª
comfort_zone_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∏—Å–∫—É—à–µ–Ω–∏–µ"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∏—Å–∫—É—à–µ–Ω–∏–µ")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª
settings_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìñ FAQ"), KeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
        [KeyboardButton(text="üî• –†–µ–∂–∏–º –∫–æ–Ω—Ç—Ä–æ–ª—è"), KeyboardButton(text="üé≤ –†–∞–Ω–¥–æ–º–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏")],
        [KeyboardButton(text="üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–º–µ–Ω—é ¬´–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π¬ª
reminders_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"), KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é ¬´–†–∞–Ω–¥–æ–º–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏¬ª
challenges_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂–∏"), KeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂–∏")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")]
    ],
    resize_keyboard=True
)




# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class AgreementStates(StatesGroup):
    waiting_for_sign = State()

class ComfortZoneStates(StatesGroup):
    waiting_for_temptation = State()

# –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫
class HabitsStates(StatesGroup):
    waiting_for_habit = State()
    waiting_for_custom_frequency = State()

class DeleteHabitStates(StatesGroup):
    waiting_for_habit_name = State()

# –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–∫—É—à–µ–Ω–∏–π
class AddTemptationState(StatesGroup):
    waiting_for_temptation = State()

class DeleteTemptationState(StatesGroup):
    waiting_for_temptation_name = State()

# –î–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class WakeUpStates(StatesGroup):
    waiting_for_time = State()



# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏–≤—ã—á–∫–∏
frequency_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="frequency_daily")],
        [InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ –¥–µ–Ω—å", callback_data="frequency_alternate")],
        [InlineKeyboardButton(text="–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="frequency_custom")]
    ]
)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
check_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
         [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="check_yes"),
          InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="check_no")]
    ]
)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –ú–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞ 
shop_menu_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å 30 –º–∏–Ω", callback_data="buy_30"),
            InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å 1 —á–∞—Å", callback_data="buy_1h")
        ],
        [
            InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å 2 —á–∞—Å–∞", callback_data="buy_2h")
        ],
        [
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–µ–Ω—å", callback_data="buy_cancel")
        ],
        [
            InlineKeyboardButton(text="–í—ã—Ö–æ–¥–Ω–æ–π –æ—Ç –ø—Ä–∏–≤—ã—á–µ–∫", callback_data="buy_dayoff")
        ],
        [
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="shop_back")
        ]
    ]
)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - ¬´–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è¬ª
notif_options_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="1 —Ä–∞–∑ –≤ –¥–µ–Ω—å", callback_data="notif_1"),
            InlineKeyboardButton(text="3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="notif_3"),
            InlineKeyboardButton(text="5 —Ä–∞–∑ –≤ –¥–µ–Ω—å", callback_data="notif_5")
        ]
    ]
)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - ¬´–†–µ–∂–∏–º –∫–æ–Ω—Ç—Ä–æ–ª—è¬ª
control_mode_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ú—è–≥–∫–∏–π (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å)", callback_data="control_mild")],
        [InlineKeyboardButton(text="–ñ–µ—Å—Ç–∫–∏–π (—Å—Ç—Ä–æ–≥–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å)", callback_data="control_strict")]
    ]
)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º –≤ –î–µ–Ω—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º - ¬´–†–µ–∂–∏–º –∫–æ–Ω—Ç—Ä–æ–ª—è¬ª
control_response_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–Ø –¥–µ—Ä–∂—É—Å—å!", callback_data="control_hold"),
            InlineKeyboardButton(text="–Ø —Å–æ—Ä–≤–∞–ª—Å—è.", callback_data="control_fail")
        ]
    ]
)



# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def schedule_notifications(user_id: int, notif_times: list):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞.
    notif_times ‚Äì —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM".
    """
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.
    for time_str in notif_times:
        hour, minute = map(int, time_str.split(":"))
        # –§–æ—Ä–º–∏—Ä—É–µ–º job_id, –Ω–∞–ø—Ä–∏–º–µ—Ä "notif_123_1000" –¥–ª—è user_id 123 –∏ –≤—Ä–µ–º–µ–Ω–∏ 10:00
        job_id = f"notif_{user_id}_{time_str.replace(':','')}"
        # –ï—Å–ª–∏ —Ç–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ –µ—Å—Ç—å, —É–¥–∞–ª—è–µ–º –µ—ë
        if scheduler.get_job(job_id):
            scheduler.remove_job(job_id)
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        scheduler.add_job(
            send_notification,
            trigger="cron",
            args=[user_id],
            id=job_id,
            hour=hour,
            minute=minute,
            timezone="Europe/Moscow"  # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        )

def unschedule_notifications(user_id: int):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    for job in scheduler.get_jobs():
        if job.id.startswith(f"notif_{user_id}_"):
            scheduler.remove_job(job.id)

async def send_notification(user_id: int):
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    established_notices_messages = [
    "–≠–π, –Ω–µ –∑–∞–±—ã–ª –ø—Ä–æ —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏? ‚è≥ –î–µ–ª–∞–π –¥–µ–ª–æ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –≥–æ—Ä–¥–∏—Ç—å—Å—è —Å–æ–±–æ–π!",
    "–¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è —Å–∞–º–∏! üí™ –ü–æ—Ä–∞ –≤—Å—Ç–∞—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å —Ç–æ, —á—Ç–æ —Ç—ã –æ–±–µ—â–∞–ª —Å–µ–±–µ.",
    "–¢—ã –∏–¥—ë—à—å –∫ —Ü–µ–ª–∏ –∏–ª–∏ —Ç–æ–ø—á–µ—à—å—Å—è –Ω–∞ –º–µ—Å—Ç–µ? ü§î –ù–∞–ø–æ–º–∏–Ω–∞—é: –ø—Ä–∏–≤—ã—á–∫–∏ –∂–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äì —ç—Ç–æ —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ. üî• –ê —Ç—ã —É–∂–µ —Å–¥–µ–ª–∞–ª —à–∞–≥ –≤–ø–µ—Ä—ë–¥ —Å–µ–≥–æ–¥–Ω—è?",
    "–£—Å–ø–µ—Ö ‚Äì —ç—Ç–æ –º–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–±–µ–¥—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. üèÜ –í—ã–ø–æ–ª–Ω–∏ –ø—Ä–∏–≤—ã—á–∫–∏, —á—Ç–æ–±—ã –ø—Ä–∏–±–ª–∏–∂–∞—Ç—å—Å—è –∫ –Ω–µ–º—É!",
    "–ù–µ –ø–æ–∑–≤–æ–ª—è–π –ª–µ–Ω–∏ –ø–æ–±–µ–∂–¥–∞—Ç—å! –ü–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äì –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–µ –∂–¥—É—Ç!",
    "–ï—Å–ª–∏ –Ω–µ —Å–µ–π—á–∞—Å, —Ç–æ –∫–æ–≥–¥–∞? ‚è≥ –û—Ç–ª–æ–∂–∏—à—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ ‚Äì –æ—Ç–ª–æ–∂–∏—à—å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
    "–¢—ã –¥–µ—Ä–∂–∏—à—å —É–¥–∞—Ä–Ω—ã–π —Ä–µ–∂–∏–º? üöÄ –¢–æ–≥–¥–∞ –¥–æ–∫–∞–∂–∏ —ç—Ç–æ –∏ –≤—ã–ø–æ–ª–Ω–∏ —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏ —Å–µ–≥–æ–¥–Ω—è!",
    "–î–µ–Ω—å –ø—Ä–æ–π–¥—ë—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ. üìÖ –í–æ–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º, —Å—Ç–∞–Ω–µ—à—å –ª–∏ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –ª—É—á—à–µ. –í—ã–ø–æ–ª–Ω—è–π –ø—Ä–∏–≤—ã—á–∫–∏!"
    ]

    text_established_notices = random.choice(established_notices_messages)
    try:
        await bot.send_message(user_id, text_established_notices)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# –§—É–Ω–∫—Ü–∏—è, –æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –¥–Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–ø–æ—Å–ª–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö)
def schedule_control_mode_for_user(user_id: int):
    from database import get_control_mode, get_user_profile
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ profile[2])
    profile = get_user_profile(user_id)
    if not profile:
        return
    status = profile[2]
    # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–î–µ–Ω—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"
    if status != "–î–µ–Ω—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º":
        return
    mode = get_control_mode(user_id)
    # –ü–µ—Ä–µ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for job in scheduler.get_jobs():
        if job.id.startswith(f"control_{user_id}_"):
            scheduler.remove_job(job.id)
    if mode == "–∂–µ—Å—Ç–∫–∏–π":
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º 3 —Å–æ–æ–±—â–µ–Ω–∏—è: 12:30, 16:30, 21:30 (Moscow time)
        for t in ["12:30", "16:30", "21:30"]:
            hour, minute = map(int, t.split(":"))
            job_id = f"control_{user_id}_{t.replace(':','')}"
            scheduler.add_job(send_hard_control_message, "cron", args=[user_id], id=job_id, hour=hour, minute=minute, timezone="Europe/Moscow")
    elif mode == "–º—è–≥–∫–∏–π":
        # –ú—è–≥–∫–∏–π —Ä–µ–∂–∏–º: –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 17:30
        job_id = f"control_{user_id}_1900"
        scheduler.add_job(send_mild_control_message, "cron", args=[user_id], id=job_id, hour=17, minute=30, timezone="Europe/Moscow")



# –§—É–Ω–∫—Ü–∏—è, –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
def get_daily_bonus(max_streak):
    if max_streak >= 365:
         return 10
    elif max_streak >= 300:
         return 5
    elif max_streak >= 200:
         return 4
    elif max_streak >= 100:
         return 3
    elif max_streak >= 60:
         return 2
    elif max_streak >= 30:
         return 1
    elif max_streak >= 7:
         return 0.5
    return 0

# –§—É–Ω–∫—Ü–∏—è, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–ª–∞–Ω—Å–∞
async def daily_bonus_job():
    users = get_all_users()  # (user_id, max_streak, balance, award_100, award_500, award_1000, ...)
    for user in users:
         user_id, max_streak, balance, award_100, award_500, award_1000, *_ = user
         bonus = get_daily_bonus(max_streak)
         if bonus:
              update_balance(user_id, bonus)
         new_balance = get_user_balance(user_id)
         notifications = []
         if new_balance >= 100 and award_100 == 0:
              set_award(user_id, "award_100", 1)
              notifications.append("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª –Ω–∞–≥—Ä–∞–¥—É 'üíµ –ü–æ–¥—É—à–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - 100 –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!'")
         if new_balance >= 500 and award_500 == 0:
              set_award(user_id, "award_500", 1)
              notifications.append("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª –Ω–∞–≥—Ä–∞–¥—É 'üí∞ –ò–Ω–≤–µ—Å—Ç–æ—Ä - 500 –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!'")
         if new_balance >= 1000 and award_1000 == 0:
              set_award(user_id, "award_1000", 1)
              notifications.append("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª –Ω–∞–≥—Ä–∞–¥—É 'üíé –û–¥–∏–Ω –∏–∑ –±–æ–≥–∞—Ç–µ–π—à–∏—Ö - 1000 –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!'")
         for note in notifications:
              try:
                   await bot.send_message(user_id, note)
              except Exception as e:
                   print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–≥—Ä–∞–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")



# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
async def send_daily_tasks(user_id, bot_instance): 
    tasks = get_todays_tasks(user_id)
    if tasks:
         text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(f"- {task}" for task in tasks)
    else:
         text = "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç."
    try:
         await bot.send_message(user_id, text)
         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å: –µ—Å–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–µ–Ω—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å
         profile = get_user_profile(user_id)
         if profile and profile[2] == "–î–µ–Ω—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º":
             await send_control_morning_message(user_id)
             schedule_control_mode_for_user(user_id)
         else:
             # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Å–≤–æ–±–æ–¥–Ω—ã–π ‚Äì —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
             unschedule_control_mode(user_id)
    except Exception as e:
         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á. 
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∏—Ç –≤—Ä–µ–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM) –∏ –¥–æ–±–∞–≤–∏—Ç –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
def schedule_daily_tasks(user_id, wakeup_time):
    # wakeup_time –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
    hour, minute = map(int, wakeup_time.split(":"))
    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    job_id = f"daily_tasks_{user_id}"
    # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –µ—ë –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤—Ä–µ–º—è –º–µ–Ω—è–µ—Ç—Å—è)
    if scheduler.get_job(job_id):
         scheduler.remove_job(job_id)
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    scheduler.add_job(send_daily_tasks, "cron", args=[user_id, bot], id=job_id, hour=hour, minute=minute)


# –§—É–Ω–∫—Ü–∏—è, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫
async def send_daily_check():
    import sqlite3
    conn = sqlite3.connect("storage.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    user_ids = [row[0] for row in cursor.fetchall()]
    conn.close()

    for user_id in user_ids:
         if get_day_off(user_id) == 1:
              # –õ–æ–≥–∏–∫–∞ –¥–ª—è "–≤—ã—Ö–æ–¥–Ω–æ–≥–æ" –¥–Ω—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É–ø–∏–ª –≤—ã—Ö–æ–¥–Ω–æ–π)
              conn = sqlite3.connect("storage.db")
              cursor = conn.cursor()
              cursor.execute("SELECT current_streak, max_streak FROM users WHERE user_id=?", (user_id,))
              row = cursor.fetchone()
              conn.close()
              current_streak, max_streak = row[0], row[1]
              new_streak = current_streak + 1
              update_streak(user_id, new_streak)
              if new_streak > max_streak:
                   update_max_streak(user_id, new_streak)
              try:
                  await bot.send_message(user_id, 
                        f"–°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –≤—ã—Ö–æ–¥–Ω–æ–π, —Å–µ–≥–æ–¥–Ω—è —Ç—ã –≤–Ω–µ —Å–∏—Å—Ç–µ–º—ã! –ë–µ–∑ —É–≥—Ä—ã–∑–µ–Ω–∏–π —Å–æ–≤–µ—Å—Ç–∏, –±–µ–∑ –æ—Ç—á—ë—Ç–æ–≤ ‚Äì –ø—Ä–æ—Å—Ç–æ –¥–µ–Ω—å –¥–ª—è —Å–µ–±—è.\n–ù–æ –∑–∞–≤—Ç—Ä–∞ —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ–π! –ù–µ –∑–∞–±—ã–≤–∞–π, –∑–∞—á–µ–º —Ç—ã –≤—Å—ë —ç—Ç–æ –Ω–∞—á–∞–ª üî•")
                  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
                  set_day_off(user_id, 0)
              except Exception as e:
                  print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
         else:
              # –ó–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Ä–≤–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              if get_control_failed(user_id) == 1:
                  try:
                      await bot.send_message(user_id,
                          "–°–µ–≥–æ–¥–Ω—è –±–µ–∑ –≤–µ—á–µ—Ä–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å–µ–≥–æ–¥–Ω—è –ø–æ–±–µ–¥–∏–ª–æ –∏—Å–∫—É—à–µ–Ω–∏–µ. –ù–æ —Ç—ã –≤—Å—ë –µ—â—ë –≤ –∏–≥—Ä–µ!\n–ó–∞–≤—Ç—Ä–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è, –Ω–æ —É —Ç–µ–±—è ‚Äì –µ—Å—Ç—å —à–∞–Ω—Å –≤–∑—è—Ç—å —Ä–µ–≤–∞–Ω—à.",
                          reply_markup=main_menu_keyboard)
                  except Exception as e:
                      print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
              else:
                  try:
                      await bot.send_message(user_id, "–í—ã–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∏ —Å–µ–≥–æ–¥–Ω—è?", reply_markup=check_keyboard)
                      pending_checks[user_id] = True
                  except Exception as e:
                      print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–ø—Ä–æ—Å–∞ - –î–ê
@router.callback_query(F.data == "check_yes")
async def check_yes_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id in pending_checks:
         pending_checks.pop(user_id)
    set_status(user_id, "–°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å")
    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å. –í–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö 10 –º–æ–Ω–µ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞.
    today_str = datetime.datetime.now().strftime("%Y-%m-%d")
    assigned_date = get_challenge_assigned_date(user_id)
    bonus_money = 15 if assigned_date == today_str else 10
    update_balance(user_id, bonus_money)  # –Ω–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –¥–µ–Ω—å
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É–¥–∞—Ä–Ω—ã–π —Ä–µ–∂–∏–º —Ñ–ª–∞–≥–∏ streak-–Ω–∞–≥—Ä–∞–¥
    import sqlite3
    conn = sqlite3.connect("storage.db")
    cursor = conn.cursor()
    cursor.execute(
         "SELECT current_streak, award_streak_7, award_streak_30, award_streak_60, award_streak_100, award_streak_200, award_streak_300, award_streak_365 FROM users WHERE user_id=?",
         (user_id,)
    )
    row = cursor.fetchone()
    conn.close()

    current_streak = row[0] if row else 0
    new_streak = current_streak + 1
    update_streak(user_id, new_streak)

    # –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç–∏–≥ –Ω–∞–≥—Ä–∞–¥—ã!
    notifications = []
    if new_streak >= 7 and (row[1] == 0):
         set_award(user_id, "award_streak_7", 1)
         notifications.append("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª(–∞) –Ω–∞–≥—Ä–∞–¥—É '–ù–µ—Å–≥–∏–±–∞–µ–º—ã–π –Ω–æ–≤–∏—á–æ–∫ - 7 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞'.\n–¢—ã –ø—Ä–æ–¥–µ—Ä–∂–∞–ª—Å—è —Ü–µ–ª—É—é –Ω–µ–¥–µ–ª—é! –≠—Ç–æ —É–∂–µ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å ‚Äì —ç—Ç–æ —Å–∏–ª–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!\n–¢–µ–ø–µ—Ä—å —Ç—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å +0.5 –º–æ–Ω–µ—Ç –∫ —Å–≤–æ–µ–º—É –±–∞–ª–∞–Ω—Å—É.")
    if new_streak >= 30 and (row[2] == 0):
         set_award(user_id, "award_streak_30", 1)
         notifications.append("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª(–∞) –Ω–∞–≥—Ä–∞–¥—É 'ü•â –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π - 30 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞'.\n–ú–µ—Å—è—Ü –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø–æ–∑–∞–¥–∏, –∏ —Ç—ã —É–∂–µ –¥–∞–ª–µ–∫–æ –Ω–µ –Ω–æ–≤–∏—á–æ–∫. –¢—ã –¥–æ–∫–∞–∑—ã–≤–∞–µ—à—å, —á—Ç–æ –ø—Ä–∏–≤—ã—á–∫–∏ ‚Äì —Ç–≤–æ–π –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏!\n–¢–µ–ø–µ—Ä—å —Ç—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å +1 –º–æ–Ω–µ—Ç—É –∫ —Å–≤–æ–µ–º—É –±–∞–ª–∞–Ω—Å—É.")
    if new_streak >= 60 and (row[3] == 0):
         set_award(user_id, "award_streak_60", 1)
         notifications.append("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª(–∞) –Ω–∞–≥—Ä–∞–¥—É 'ü•à –°—Ç–æ–π–∫–∏–π —á–µ–º–ø–∏–æ–Ω - 60 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞'.\n–î–≤–∞ –º–µ—Å—è—Ü–∞ ‚Äì —ç—Ç–æ —É–∂–µ —Å–µ—Ä—å–µ–∑–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å! –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–¥—ë—à—å –∫ —Ü–µ–ª–∏, —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –ø—Ä–∏–º–µ—Ä–æ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö. –ü—Ä–æ–¥–æ–ª–∂–∞–π!\n–¢–µ–ø–µ—Ä—å —Ç—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å +2 –º–æ–Ω–µ—Ç—ã –∫ —Å–≤–æ–µ–º—É –±–∞–ª–∞–Ω—Å—É.")
    if new_streak >= 100 and (row[4] == 0):
         set_award(user_id, "award_streak_100", 1)
         notifications.append("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª(–∞) –Ω–∞–≥—Ä–∞–¥—É 'ü•á –ù–µ—É–¥–µ—Ä–∂–∏–º—ã–π - 100 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞'.\n–°—Ç–æ –¥–Ω–µ–π —Å–∏–ª—ã, —Ñ–æ–∫—É—Å–∞ –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã. –≠—Ç–æ —É–∂–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤—ã—á–∫–∏ ‚Äì —ç—Ç–æ —Ç–≤–æ—è –Ω–æ–≤–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å. –¢—ã ‚Äì –º–∞—à–∏–Ω–∞!\n–¢–µ–ø–µ—Ä—å —Ç—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å +3 –º–æ–Ω–µ—Ç—ã –∫ —Å–≤–æ–µ–º—É –±–∞–ª–∞–Ω—Å—É.")
    if new_streak >= 200 and (row[5] == 0):
         set_award(user_id, "award_streak_200", 1)
         notifications.append("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª(–∞) –Ω–∞–≥—Ä–∞–¥—É 'üèÖ –ß–µ–ª–æ–≤–µ–∫ –∂–µ–ª–µ–∑–Ω–æ–π –≤–æ–ª–∏ - 200 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞'.\n–î–≤–µ—Å—Ç–∏ –¥–Ω–µ–π ‚Äì –∏ —Ç—ã –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –≤ —Å—Ç—Ä–æ—é. –ö —ç—Ç–æ–º—É –º–æ–º–µ–Ω—Ç—É –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —É–∂–µ —Å–¥–∞—é—Ç—Å—è, –Ω–æ –Ω–µ —Ç—ã. –¢—ã –∏–¥—ë—à—å –¥–∞–ª—å—à–µ!\n–¢–µ–ø–µ—Ä—å —Ç—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å +4 –º–æ–Ω–µ—Ç—ã –∫ —Å–≤–æ–µ–º—É –±–∞–ª–∞–Ω—Å—É.")
    if new_streak >= 300 and (row[6] == 0):
         set_award(user_id, "award_streak_300", 1)
         notifications.append("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª(–∞) –Ω–∞–≥—Ä–∞–¥—É 'üéñ –õ–µ–≥–µ–Ω–¥–∞ —Å–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã - 300 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞'.\n–¢—Ä–∏ —Å–æ—Ç–Ω–∏ –¥–Ω–µ–π. –ö—Ç–æ-—Ç–æ –º–µ—á—Ç–∞–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö, –∞ —Ç—ã –ø—Ä–æ—Å—Ç–æ –∏—Ö —Å–æ–∑–¥–∞—ë—à—å. –≠—Ç–æ —É—Ä–æ–≤–µ–Ω—å —á–µ–º–ø–∏–æ–Ω–∞!\n–¢–µ–ø–µ—Ä—å —Ç—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å +5 –º–æ–Ω–µ—Ç –∫ —Å–≤–æ–µ–º—É –±–∞–ª–∞–Ω—Å—É.")
    if new_streak >= 365 and (row[7] == 0):
         set_award(user_id, "award_streak_365", 1)
         notifications.append("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª(–∞) –Ω–∞–≥—Ä–∞–¥—É 'üèÜ –ú–∞—Å—Ç–µ—Ä —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ - 365 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞'.\n–ì–æ–¥ –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏! –¢—ã –¥–æ–∫–∞–∑–∞–ª, —á—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ. –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ‚Äì —ç—Ç–æ –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏. –¢—ã –ø–æ–±–µ–¥–∏–ª —Å–∏—Å—Ç–µ–º—É!\n–¢–µ–ø–µ—Ä—å —Ç—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å +10 –º–æ–Ω–µ—Ç –∫ —Å–≤–æ–µ–º—É –±–∞–ª–∞–Ω—Å—É.")
    

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    conn = sqlite3.connect("storage.db")
    cursor = conn.cursor()
    cursor.execute("SELECT max_streak FROM users WHERE user_id=?", (user_id,))
    max_streak = cursor.fetchone()[0]
    conn.close()
    if new_streak > max_streak:
         update_max_streak(user_id, new_streak)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö (–µ—Å–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª)
    for note in notifications:
         await bot.send_message(user_id, note)

    # –ò–°–ü–†–ê–í–õ–Ø–õ
    # –°–ø–∏—Å–æ–∫ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–æ–º –¥–Ω–µ
    congratulations_successful_day_message = [
    "–ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! ‚úÖ\n–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø–æ–ª—É—á–∞–µ—à—å –∑–∞—Å–ª—É–∂–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å - –º–æ–Ω–µ—Ç—ã –≤ –∫–æ–ø–∏–ª–∫—É!",
    "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéØ \n–í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –¥–µ–Ω—å —É–¥–∞–ª—Å—è, –∏ –≤–æ—Ç —Ç–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞ ‚Äî –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
    "–¢—ã –∑–∞–∫—Ä—ã–ª —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–∞ 100%! üìÖ \n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ —Ç–≤–æ–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º –º–æ–Ω–µ—Ç—ã –Ω–∞ –±–∞–ª–∞–Ω—Å. –í–ø–µ—Ä—ë–¥ –∫ –Ω–æ–≤—ã–º –≤–µ—Ä—à–∏–Ω–∞–º!",
    "–¢–≤–æ–π —Ä–µ–∂–∏–º –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º! üí™\n–°–µ–≥–æ–¥–Ω—è —Ç—ã —Å–¥–µ–ª–∞–ª –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ, –∞ –∑–Ω–∞—á–∏—Ç, +–º–æ–Ω–µ—Ç—ã –≤ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å. –ù–µ —Å–±–∞–≤–ª—è–π —Ç–µ–º–ø!",
    "–î–µ–Ω—å –ø—Ä–æ–∂–∏—Ç –Ω–µ –∑—Ä—è! üéâ \n–¢—ã —Å–Ω–æ–≤–∞ –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ —Å–≤–æ–∏–º —Ü–µ–ª—è–º, –∏ –∑–∞ —ç—Ç–æ —Ç–µ–±–µ –ø–æ–ª–∞–≥–∞—é—Ç—Å—è –±–æ–Ω—É—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã. –ó–∞–≤—Ç—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏–º? üòâ",
    "–¢—ã –¥–æ–∫–∞–∑–∞–ª, —á—Ç–æ –¥–µ—Ä–∂–∏—à—å —Å–ª–æ–≤–æ! üî•\n–í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ‚Äî –∞ –∑–Ω–∞—á–∏—Ç, –º–æ–Ω–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ —Ç–≤–æ–π —Å—á—ë—Ç. –¢–∞–∫ —Ä–æ–∂–¥–∞—é—Ç—Å—è —á–µ–º–ø–∏–æ–Ω—ã!",
    " –í–æ—Ç —ç—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π! üöÄ \n–°–µ–≥–æ–¥–Ω—è —Ç—ã —Å–Ω–æ–≤–∞ –≤ –∏–≥—Ä–µ, –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∏ –º–æ–Ω–µ—Ç—ã –ª–µ—Ç—è—Ç –∫ —Ç–µ–±–µ –≤ –∫–æ–ø–∏–ª–∫—É. –ó–∞–≤—Ç—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏–º —ç—Ç–æ—Ç —É—Å–ø–µ—Ö!"
    ]

    text_congratulations_successful_day = random.choice(congratulations_successful_day_message)

    # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ edit_reply_markup –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try/except
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —á–∏—Å—Ç–∞—è
        pass
    await callback.message.answer(text_congratulations_successful_day, reply_markup=main_menu_keyboard)  # –î–æ —ç—Ç–æ–≥–æ, –±—ã–ª–æ —Ç–∞–∫ await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è, —Ç–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –º–æ–Ω–µ—Ç.", reply_markup=main_menu_keyboard)
    await callback.answer()

# Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–ø—Ä–æ—Å–∞ - –ù–ï–¢
@router.callback_query(F.data == "check_no")
async def check_no_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id in pending_checks:
         pending_checks.pop(user_id)
    set_status(user_id, "–î–µ–Ω—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º")
    update_streak(user_id, 0)
    increment_fail_count(user_id)
    # –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ edit_reply_markup –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try/except
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —á–∏—Å—Ç–∞—è
        pass
    await callback.message.answer("–û—à–∏–±–∫–∏ ‚Äì —á–∞—Å—Ç—å –ø—É—Ç–∏. –ù–æ –æ–Ω–∏ –∏–º–µ—é—Ç –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è.\n–ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å –∑–∞–ø—Ä–µ—Ç–æ–≤ –∏ —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ!", reply_markup=main_menu_keyboard)
    await callback.answer()


# –§—É–Ω–∫—Ü–∏—è, –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ—Ç–≤–µ—Ç–∞ –æ–ø—Ä–æ—Å–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ (23:57)
async def handle_no_response():
    # –ò–°–ü–†–ê–í–õ–Ø–õ
    no_answear_survey_message = [
    "–¢–∏—à–∏–Ω–∞ ‚Äì —Ç–æ–∂–µ –æ—Ç–≤–µ—Ç‚Ä¶ ü§®\n–¢—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫, –∞ –∑–Ω–∞—á–∏—Ç, –¥–µ–Ω—å –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –ø—Ä–æ–≤–∞–ª—å–Ω—ã–π. –ó–∞–≤—Ç—Ä–∞ ‚Äì –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. –ù–∞–¥–µ—é—Å—å, —Ç—ã —Å–¥–µ–ª–∞–µ—à—å –≤—ã–≤–æ–¥—ã!",
    "–ê–ª–ª–æ, –ø—Ä–∏—ë–º? üì¢ \n–¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–µ—á–µ—Ä–Ω—é—é –ø—Ä–æ–≤–µ—Ä–∫—É, –∞ –∑–Ω–∞—á–∏—Ç, —Å–µ–≥–æ–¥–Ω—è –±–µ–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ó–∞–≤—Ç—Ä–∞ –ø—Ä–∞–≤–∏–ª–∞ —É–∂–µ—Å—Ç–æ—á–∞—é—Ç—Å—è. –î–∞–≤–∞–π –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π, –æ–∫?",
    "–ë–æ—Ç –Ω–µ —É—Å–ª—ã—à–∞–ª —Ç–≤–æ–µ–≥–æ –æ—Ç—á—ë—Ç–∞‚Ä¶ ü§ñ \n–ê —Ä–∞–∑ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –∑–Ω–∞—á–∏—Ç, –¥–µ–Ω—å –ø–æ—à—ë–ª –≤ –º–∏–Ω—É—Å. –ó–∞–≤—Ç—Ä–∞ —Ç–µ–±—è –∂–¥—ë—Ç –¥–µ–Ω—å –±–µ–∑ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –Ω–µ —Ç–µ—Ä—è–π—Å—è!",
    "–¢—ã —É—à—ë–ª –≤ –ø–æ–¥–ø–æ–ª—å–µ? üïµÔ∏è‚Äç‚ôÇÔ∏è \n–ü—Ä–æ–ø—É—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ = –ø—Ä–æ–≤–∞–ª—å–Ω—ã–π –¥–µ–Ω—å. –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–µ–µ. –ù–µ –∑–∞–±—ã–≤–∞–π ‚Äì –ø—Ä–∏–≤—ã—á–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ —Ç—ã –≤ –∏–≥—Ä–µ!",
    "–ú–æ–ª—á–∞–Ω–∏–µ ‚Äì –Ω–µ –≤—Å–µ–≥–¥–∞ –∑–æ–ª–æ—Ç–æ‚Ä¶ ‚è≥ \n–¢—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –∞ –∑–Ω–∞—á–∏—Ç, –¥–µ–Ω—å –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω. –ó–∞–≤—Ç—Ä–∞ —Ä–µ–∂–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–Ω—è. –ë—É–¥—å –Ω–∞—á–µ–∫—É!",
    "–ù–µ –æ—Ç–º–µ—á–µ–Ω–æ ‚Äì –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! üìù \n–¢—ã –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞, –∞ –∑–Ω–∞—á–∏—Ç, –¥–µ–Ω—å –ø—Ä–æ–≤–∞–ª–µ–Ω. –ó–∞–≤—Ç—Ä–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —É–¥–µ–ª–∏ –º–∏–Ω—É—Ç—É ‚Äì –æ–Ω–æ —Ç–æ–≥–æ —Å—Ç–æ–∏—Ç!",
    "–ò–≥–Ω–æ—Ä ‚Äì –ø–ª–æ—Ö–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è. üôÖ‚Äç‚ôÇÔ∏è \n–ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —Ç–æ –Ω–µ—Ç –∏ —É—Å–ø–µ—Ö–∞. –î–µ–Ω—å –ø—Ä–æ–≤–∞–ª–µ–Ω, –∞ –∑–∞–≤—Ç—Ä–∞ —É—Å–ª–æ–≤–∏—è —Å—Ç–∞–Ω—É—Ç –∂–µ—Å—Ç—á–µ. –ù–µ —Ç–µ—Ä—è–π—Å—è!",
    "–°–∏—Å—Ç–µ–º–∞ –∂–¥–∞–ª–∞, –Ω–æ –Ω–µ –¥–æ–∂–¥–∞–ª–∞—Å—å‚Ä¶ ü§∑‚Äç‚ôÇÔ∏è \n–î–µ–Ω—å –≤ –º–∏–Ω—É—Å–µ, –∞ –∑–∞–≤—Ç—Ä–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. –ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –Ω–µ —Å—Ç–∞–Ω–µ—Ç –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–æ–π?"
    ]

    text_no_answear_survey = random.choice(HARD_CONTROL_MESSAGES)
    for user_id in list(pending_checks.keys()):
         if pending_checks.get(user_id):
             try:
                 await bot.send_message(user_id, text_no_answear_survey)
             except Exception as e:
                 print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
             # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —É–¥–∞—Ä–Ω—ã–π —Ä–µ–∂–∏–º, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ–≤–∞–ª–æ–≤, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
             set_status(user_id, "–î–µ–Ω—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º")
             update_streak(user_id, 0)
             increment_fail_count(user_id)
             pending_checks.pop(user_id)


@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–ò–Ω–∫–æ–≥–Ω–∏—Ç–æ"
    add_user(user_id, username)
    
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üëã\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤–Ω–µ–¥—Ä–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏.\n"
        "–°–ª–∞–±—ã–µ –ª–æ–º–∞—é—Ç—Å—è, —Å–∏–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –ª—É—á—à–µ. –¢—ã —Å –Ω–∞–º–∏?\n\n"
        "–≠—Ç–æ—Ç –ø—É—Ç—å –Ω–µ –±—É–¥–µ—Ç –ª—ë–≥–∫–∏–º, –Ω–æ –æ–Ω —Ç–æ–≥–æ —Å—Ç–æ–∏—Ç. –ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ —Å —Å–æ–≤–µ—Å—Ç—å—é ‚Äì –æ–Ω–∞ –±—É–¥–µ—Ç —Ç–≤–æ–∏–º —Å–æ—é–∑–Ω–∏–∫–æ–º –∏ —Å—É–¥—å—ë–π.\n"
        "–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤(–∞), —Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É."
    )
    await message.answer(text, reply_markup=start_keyboard)

@router.message(F.text == "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º")
async def view_agreement(message: types.Message, state: FSMContext):
    text = (
        f"üìù –Ø, {message.from_user.first_name}, –æ–±–µ—â–∞—é –ø–µ—Ä–µ–¥ —Å–∞–º–∏–º —Å–æ–±–æ–π —á–µ—Å—Ç–Ω–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞. "
        "–ï—Å–ª–∏ —è —Ö–æ—Ç—å —Ä–∞–∑ —Å–æ–≤—Ä—É, —Ç–æ –Ω–∞–∫–∞–∂—É —Å–µ–±—è –µ—â—ë —Å—Ç—Ä–æ–∂–µ. –ö–ª—è–Ω—É—Å—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –∏ –∂–µ–ª–µ–∑–Ω–æ–π –≤–æ–ª–µ–π!\n\n"
        "–î–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É!"
    )
    await message.answer(text, reply_markup=sign_keyboard)
    await state.set_state(AgreementStates.waiting_for_sign)

@router.message(AgreementStates.waiting_for_sign, F.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")
async def sign_agreement_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    sign_agreement(user_id)
    await message.answer(
        "üî• –°–£–ü–ï–†! –¢–µ–ø–µ—Ä—å —Ç—ã –≤ –∏–≥—Ä–µ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–≤–æ—é –Ω–æ–≤—É—é –∂–∏–∑–Ω—å!\n\n"
        "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –ó–æ–Ω—ã –∫–æ–º—Ñ–æ—Ä—Ç–∞.\n"
        "–ö–∞–∫–æ–µ –∏—Å–∫—É—à–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å? (–ù–∞–ø–∏—à–∏ '—Å—Ç–æ–ø', —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å)",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()
    await state.set_state(ComfortZoneStates.waiting_for_temptation)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ó–æ–Ω—ã –∫–æ–º—Ñ–æ—Ä—Ç–∞ ‚Äì –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º
@router.message(ComfortZoneStates.waiting_for_temptation, F.text.casefold() == "—Å—Ç–æ–ø")
async def finish_comfort_zone(message: types.Message, state: FSMContext):
    await message.answer(
        "–ó–æ–Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –ø—Ä–∏–≤—ã—á–∫–∏.\n"
        "–í–≤–µ–¥–∏ –æ–¥–Ω—É –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –≤–Ω–µ–¥—Ä–∏—Ç—å –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å. –ï—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª, –Ω–∞–ø–∏—à–∏ '—Å—Ç–æ–ø' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()
    await state.set_state(HabitsStates.waiting_for_habit)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç "—Å—Ç–æ–ø" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–µ–∫
@router.message(HabitsStates.waiting_for_habit, F.text.casefold() == "—Å—Ç–æ–ø")
async def finish_habits(message: types.Message, state: FSMContext):
    await message.answer(
        "–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n–¢–µ–ø–µ—Ä—å, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –≤–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –æ–±—ã—á–Ω–æ –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è?\n–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:00)",
        reply_markup=ReplyKeyboardRemove() #reply_markup=main_menu_keyboard
    )
    await state.clear()
    await state.set_state(WakeUpStates.waiting_for_time)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
@router.message(WakeUpStates.waiting_for_time)
async def process_wakeup_time(message: types.Message, state: FSMContext):
    wakeup_time = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç: –¥–≤–∞ —á–∏—Å–ª–∞, –¥–≤–æ–µ—Ç–æ—á–∏–µ, –¥–≤–∞ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:00)
    if not re.match(r"^\d{2}:\d{2}$", wakeup_time):
         await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä: 07:00")
         return
    try:
         hour, minute = map(int, wakeup_time.split(":"))
         if not (0 <= hour < 24 and 0 <= minute < 60):
              raise ValueError
    except ValueError:
         await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –ü—Ä–∏–º–µ—Ä: 07:00")
         return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_wakeup_time(message.from_user.id, wakeup_time)
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á (—Ñ—É–Ω–∫—Ü–∏—è schedule_daily_tasks –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∞ –¥–∞–ª–µ–µ)
    schedule_daily_tasks(message.from_user.id, wakeup_time)
    await message.answer("–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω! –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. \n–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–∏–≤—ã—á–∫–∏
@router.message(HabitsStates.waiting_for_habit)
async def process_habit(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –Ω–µ "—Å—Ç–æ–ø", —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∏–≤—ã—á–∫–∞
    habit = message.text.strip()
    await state.update_data(current_habit=habit)
    await message.answer(
         f"–ü—Ä–∏–≤—ã—á–∫–∞: '{habit}'\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:",
         reply_markup=frequency_keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏–≤—ã–∫–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏
@router.callback_query(HabitsStates.waiting_for_habit, F.data.in_(["frequency_daily", "frequency_alternate", "frequency_custom"]))
async def frequency_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    habit = data.get("current_habit")
    user_id = callback.from_user.id
    if callback.data == "frequency_daily":
         frequency = "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
         add_habit(user_id, habit, frequency)
         # –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ edit_reply_markup –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try/except
         try:
             await callback.message.edit_reply_markup(reply_markup=None)
         except TelegramBadRequest:
             # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —á–∏—Å—Ç–∞—è
             pass  # —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
         await callback.message.answer(
             f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit}' —Å —á–∞—Å—Ç–æ—Ç–æ–π '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ' –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–∏–≤—ã—á–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—Å—Ç–æ–ø' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
         )
         await state.update_data(current_habit=None)
    elif callback.data == "frequency_alternate":
         # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–Ω–µ–π –¥–ª—è "—á–µ—Ä–µ–∑ –¥–µ–Ω—å"
         frequency = "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Å—Ä–µ–¥–∞, –ø—è—Ç–Ω–∏—Ü–∞, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
         add_habit(user_id, habit, frequency)
         await callback.message.answer(
             f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit}' —Å —á–∞—Å—Ç–æ—Ç–æ–π '—á–µ—Ä–µ–∑ –¥–µ–Ω—å' (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Å—Ä–µ–¥–∞, –ø—è—Ç–Ω–∏—Ü–∞, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–∏–≤—ã—á–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—Å—Ç–æ–ø' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
         )
         await state.update_data(current_habit=None)
    elif callback.data == "frequency_custom":
         await callback.message.answer(
             "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –ø—Ä–∏–≤—ã—á–∫–∞.\n–ü—Ä–∏–º–µ—Ä: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —á–µ—Ç–≤–µ—Ä–≥, —Å—É–±–±–æ—Ç–∞"
         )
         await state.set_state(HabitsStates.waiting_for_custom_frequency)
         # –ü—Ä–∏–≤—ã—á–∫–∞ (current_habit) –æ—Å—Ç–∞–µ—Ç—Å—è –≤ state –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await callback.answer()  # –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–Ω–µ–π
@router.message(HabitsStates.waiting_for_custom_frequency)
async def process_custom_frequency(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º, —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    days = [day.strip().lower() for day in text.split(",")]
    allowed_days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    invalid = [day for day in days if day not in allowed_days]
    if invalid:
         await message.answer(
             f"–û—à–∏–±–∫–∞: —Å–ª–µ–¥—É—é—â–∏—Ö –¥–Ω–µ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {', '.join(invalid)}.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ü—Ä–∏–º–µ—Ä: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —á–µ—Ç–≤–µ—Ä–≥, —Å—É–±–±–æ—Ç–∞"
         )
         return
    frequency = ", ".join(days)
    data = await state.get_data()
    habit = data.get("current_habit")
    add_habit(user_id, habit, frequency)
    await message.answer(
        f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit}' —Å —á–∞—Å—Ç–æ—Ç–æ–π '{frequency}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–∏–≤—ã—á–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—Å—Ç–æ–ø' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
    )
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∏–≤—ã—á–∫–∏
    await state.set_state(HabitsStates.waiting_for_habit)


@router.message(ComfortZoneStates.waiting_for_temptation)
async def process_temptation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    temptation = message.text.strip()
    add_temptation(user_id, temptation)
    await message.answer(f"–ò—Å–∫—É—à–µ–Ω–∏–µ ¬´{temptation}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ. –î–æ–±–∞–≤—å —Å–ª–µ–¥—É—é—â–µ–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '—Å—Ç–æ–ø' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª –∏–∑ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "–ù–∞–∑–∞–¥")
async def profile_back_handler(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–ú–∞–≥–∞–∑–∏–Ω¬ª
@router.message(F.text == "–ú–∞–≥–∞–∑–∏–Ω")
async def shop_handler(message: types.Message):
    shop_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–∏! \n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å —Å–µ–±–µ –Ω–µ–±–æ–ª—å—à—É—é –ø–µ—Ä–µ–¥—ã—à–∫—É –∏ –Ω–µ–º–Ω–æ–≥–æ —Å–º—è–≥—á–∏—Ç—å —Å–≤–æ–π —Ä–µ–∂–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–Ω—è. –ù–æ –ø–æ–º–Ω–∏ ‚Äì –ø–æ–±–ª–∞–∂–∫–∏ —Å—Ç–æ—è—Ç –¥–æ—Ä–æ–≥–æ, –≤–µ–¥—å –∫–∞–∂–¥–∞—è –∏–∑ –Ω–∏—Ö –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å. –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö —Å —É–º–æ–º!\n\n"
        "–ü–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:\n"
        "1) ‚è≥ 30 –º–∏–Ω—É—Ç —Å–≤–æ–±–æ–¥—ã ‚Äì 30 –º–æ–Ω–µ—Ç\n–•–æ—á–µ—à—å –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è? –ö—É–ø–∏ 30 –º–∏–Ω—É—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤–æ–∏–º –∏—Å–∫—É—à–µ–Ω–∏—è–º –≤ —Ä–µ–∂–∏–º–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–Ω—è. –ù–æ –±—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω ‚Äì –≤—Ä–µ–º—è –ª–µ—Ç–∏—Ç –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º —Ç—ã –¥—É–º–∞–µ—à—å!\n"
        "2) ‚è≥ 1 —á–∞—Å –≤–æ–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ ‚Äì 55 –º–æ–Ω–µ—Ç\n–¶–µ–ª—ã–π —á–∞—Å, —á—Ç–æ–±—ã –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —Å–æ—Ü—Å–µ—Ç–∏, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏—é —Å–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ –∑–∞–ª–∏–ø–Ω—É—Ç—å –≤ –∏–≥—Ä—É. –ù–æ –Ω–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –≤–∞–∂–Ω–µ–µ –º–∏–Ω—É—Ç–Ω—ã—Ö —Ä–∞–¥–æ—Å—Ç–µ–π!\n"
        "3) ‚è≥ 2 —á–∞—Å–∞ –±–µ–∑ –ø—Ä–∞–≤–∏–ª ‚Äì 100 –º–æ–Ω–µ—Ç\n–î–≤–∞ —á–∞—Å–∞ —Å–≤–æ–±–æ–¥—ã –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –∫–∞–∫ —Å–ª–µ–¥—É–µ—Ç —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è, –Ω–æ —Ö–≤–∞—Ç–∏—Ç –ª–∏ —Ç–µ–±–µ —Å–∏–ª—ã –≤–æ–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º?\n"
        "4) üöÄ –ü–æ–ª–Ω—ã–π –¥–µ–Ω—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π ‚Äì 300 –º–æ–Ω–µ—Ç\n –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –æ—Ç–º–µ–Ω—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º.\n–¢—ã –≤—ã–∫—É–ø–∏–ª —Å–≤–æ—é —Å–≤–æ–±–æ–¥—É –≤ –¥–µ–Ω—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞! –°–µ–≥–æ–¥–Ω—è –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ, —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ. –ù–æ –Ω–µ –∑–∞–±—ã–≤–∞–π ‚Äì –∑–∞–≤—Ç—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∂–¥—ë—Ç —Ç–µ–±—è —Å —É–¥–≤–æ–µ–Ω–Ω–æ–π —Å–∏–ª–æ–π!\n"
        "5) üèñÔ∏è –í—ã—Ö–æ–¥–Ω–æ–π –æ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ ‚Äì 500 –º–æ–Ω–µ—Ç.\n–¢—ã –∑–∞—Å–ª—É–∂–∏–ª –ø–µ—Ä–µ–¥—ã—à–∫—É! –°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π —É–¥–∞—Ä–Ω—ã–π —Ä–µ–∂–∏–º –Ω–µ –ø—Ä–µ—Ä–≤—ë—Ç—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å. –ù–æ –Ω–µ –ø—Ä–µ–≤—Ä–∞—â–∞–π —ç—Ç–æ –≤ –ø—Ä–∏–≤—ã—á–∫—É!\n\n"
        "‚ö†Ô∏è –ü–æ–º–Ω–∏: —ç—Ç–∏ –ø–æ–±–ª–∞–∂–∫–∏ ‚Äì –Ω–µ —Å–ª–∞–±–æ—Å—Ç—å, –∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö –º—É–¥—Ä–æ, –≤–µ–¥—å –∫–∞–∂–¥–∞—è –º–æ–Ω–µ—Ç–∞ –¥–∞—ë—Ç—Å—è –∑–∞ —É–ø–æ—Ä—Å—Ç–≤–æ –∏ —Ç—Ä—É–¥! üí™üî•\n"
    )
    await message.answer(shop_text, reply_markup=ReplyKeyboardRemove())
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞ (inline)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=shop_menu_keyboard)


# –î–∞–ª–µ–µ –∏–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
# =====================================================
@router.callback_query(F.data == "buy_30")
async def buy_30_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cost = 30
    current_balance = get_user_balance(user_id)
    if current_balance < cost:
         await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ 30 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.")
    else:
         update_balance(user_id, -cost)
    # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞
    # –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ edit_reply_markup –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try/except
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —á–∏—Å—Ç–∞—è
        pass
    await callback.message.answer("–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å 30 –º–∏–Ω—É—Ç –ø–æ—Å–≤—è—Ç–∏—Ç—å –ª—é–±–æ–π —Å–≤–æ–µ–π —Ö–æ—Ç–µ–ª–∫–µ.\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    await callback.answer()

@router.callback_query(F.data == "buy_1h")
async def buy_1h_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cost = 55
    current_balance = get_user_balance(user_id)
    if current_balance < cost:
         await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ 1 —á–∞—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.")
    else:
         update_balance(user_id, -cost)
    # –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ edit_reply_markup –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try/except
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —á–∏—Å—Ç–∞—è
        pass
    await callback.message.answer("–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å 1 —á–∞—Å –ø–æ—Å–≤—è—Ç–∏—Ç—å –ª—é–±–æ–π —Å–≤–æ–µ–π —Ö–æ—Ç–µ–ª–∫–µ.\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    await callback.answer()

@router.callback_query(F.data == "buy_2h")
async def buy_2h_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cost = 100
    current_balance = get_user_balance(user_id)
    if current_balance < cost:
         await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ 2 —á–∞—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.")
    else:
         update_balance(user_id, -cost)
    # –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ edit_reply_markup –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try/except
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —á–∏—Å—Ç–∞—è
        pass
    await callback.message.answer("–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å 2 —á–∞—Å–∞ –ø–æ—Å–≤—è—Ç–∏—Ç—å –ª—é–±–æ–π —Å–≤–æ–µ–π —Ö–æ—Ç–µ–ª–∫–µ.\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    await callback.answer()

@router.callback_query(F.data == "buy_cancel")
async def buy_cancel_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cost = 300
    current_balance = get_user_balance(user_id)
    if current_balance < cost:
         await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.")
    else:
         update_balance(user_id, -cost)
         # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Å "–î–µ–Ω—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º" –Ω–∞ "–°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å"
         set_status(user_id, "–°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å")
         unschedule_control_mode(user_id)
    # –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ edit_reply_markup –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try/except
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —á–∏—Å—Ç–∞—è
        pass
    await callback.message.answer("–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–º–µ–Ω—ë–Ω.\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    await callback.answer()

@router.callback_query(F.data == "buy_dayoff")
async def buy_dayoff_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cost = 500
    current_balance = get_user_balance(user_id)
    if current_balance < cost:
         await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –æ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.")
    else:
         update_balance(user_id, -cost)
         # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∫—É–ø–ª–µ–Ω –≤—ã—Ö–æ–¥–Ω–æ–π –æ—Ç –ø—Ä–∏–≤—ã—á–µ–∫
         set_day_off(user_id, 1)
    # –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ edit_reply_markup –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try/except
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —á–∏—Å—Ç–∞—è
        pass
    await callback.message.answer("–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –í—ã—Ö–æ–¥–Ω–æ–π –æ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω.\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    await callback.answer()

@router.callback_query(F.data == "shop_back")
async def shop_back_handler(callback: types.CallbackQuery):
    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ù–∞–∑–∞–¥" –≤ –º–∞–≥–∞–∑–∏–Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
    # –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ edit_reply_markup –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try/except
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —á–∏—Å—Ç–∞—è
        pass
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    await callback.answer()

# =====================================================


@router.message(F.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message):
    user_id = message.from_user.id
    profile = get_user_profile(user_id)  # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if profile:
        (username, registration_date, status, current_streak, max_streak, fail_count, balance,
         award_streak_7, award_streak_30, award_streak_60, award_streak_100, award_streak_200, award_streak_300, award_streak_365,
         award_100, award_500, award_1000) = profile
        try:
            reg_date = datetime.datetime.fromisoformat(registration_date)
        except Exception:
            reg_date = datetime.datetime.now()
        days_in_bot = (datetime.datetime.now() - reg_date).days


        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        control_mode = get_control_mode(user_id)  # "–º—è–≥–∫–∏–π" –∏–ª–∏ "–∂–µ—Å—Ç–∫–∏–π"
        challenges = "–í–∫–ª—é—á–µ–Ω—ã" if get_challenges_enabled(user_id) == 1 else "–û—Ç–∫–ª—é—á–µ–Ω—ã"
        notif_count = get_notifications(user_id)
        notif_status = f"–í–∫–ª—é—á–µ–Ω—ã ({notif_count} —Ä–∞–∑(–∞) –≤ –¥–µ–Ω—å)" if notif_count > 0 else "–û—Ç–∫–ª—é—á–µ–Ω—ã"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫ –∫ —Å—Ç–∞—Ç—É—Å—É
        status_icon = "‚úÖ" if status == "–°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å" else "‚ùå" if status == "–î–µ–Ω—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º" else ""

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
        # registration_date –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∏–¥–∞ "YYYY-MM-DD HH:MM:SS"
        reg_date = registration_date.split()[0]  # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
        # –ß—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –ø—Ä–æ—à–ª–æ —Ö–æ—Ç—è –±—ã 1 –¥–µ–Ω—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º 1
        reg_dt = datetime.datetime.strptime(reg_date, "%Y-%m-%d")
        days_in_bot = (datetime.datetime.now() - reg_dt).days + 1


        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ –ø–æ —Å—Ç—Ä–∏–∫—É
        rewards = []
        if max_streak >= 7:
             rewards.append("üéó –ù–µ—Å–≥–∏–±–∞–µ–º—ã–π –Ω–æ–≤–∏—á–æ–∫ - 7 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞")
        if max_streak >= 30:
             rewards.append("ü•â –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π - 30 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞")
        if max_streak >= 60:
             rewards.append("ü•à –°—Ç–æ–π–∫–∏–π —á–µ–º–ø–∏–æ–Ω - 60 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞")
        if max_streak >= 100:
             rewards.append("ü•á –ù–µ—É–¥–µ—Ä–∂–∏–º—ã–π - 100 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞")
        if max_streak >= 200:
             rewards.append("üèÖ –ß–µ–ª–æ–≤–µ–∫ –∂–µ–ª–µ–∑–Ω–æ–π –≤–æ–ª–∏ - 200 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞")
        if max_streak >= 300:
             rewards.append("üéñ –õ–µ–≥–µ–Ω–¥–∞ —Å–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã - 300 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞")
        if max_streak >= 365:
             rewards.append("üèÜ –ú–∞—Å—Ç–µ—Ä —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ - 365 –¥–Ω–µ–π –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞")
        # –ë–∞–ª–∞–Ω—Å–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
        if award_100:
             rewards.append("üíµ –ü–æ–¥—É—à–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - 100 –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
        if award_500:
             rewards.append("üí∞ –ò–Ω–≤–µ—Å—Ç–æ—Ä - 500 –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
        if award_1000:
             rewards.append("üíé –û–¥–∏–Ω –∏–∑ –±–æ–≥–∞—Ç–µ–π—à–∏—Ö - 1000 –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
        rewards_text = "\n".join(rewards) if rewards else "–ù–∞–≥—Ä–∞–¥ –ø–æ–∫–∞ –Ω–µ—Ç."

        text = (
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ - *{message.from_user.first_name}*\n\n"
            f"{status_icon} *–°—Ç–∞—Ç—É—Å:* {status}\n"
            f"üî• *–†–µ–∂–∏–º –∫–æ–Ω—Ç—Ä–æ–ª—è:* {control_mode.capitalize()}\n"
            f"‚è∞ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* {notif_status}\n"
            f"üé≤ *–ß–µ–ª–ª–µ–Ω–¥–∂–∏:* {challenges}\n\n"
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date} (–≤ –±–æ—Ç–µ —É–∂–µ {days_in_bot} –¥–Ω–µ–π)\n"
            f"–¢–µ–∫—É—â–∏–π —É–¥–∞—Ä–Ω—ã–π —Ä–µ–∂–∏–º: {current_streak} –¥–Ω–µ–π\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–¥–∞—Ä–Ω—ã–π —Ä–µ–∂–∏–º: {max_streak} –¥–Ω–µ–π\n"
            f"–ü—Ä–æ–≤–∞–ª–æ–≤ —É–¥–∞—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {fail_count}\n\n"
            f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {balance} –º–æ–Ω–µ—Ç\n\n"
            f"üéñ *–ù–∞–≥—Ä–∞–¥—ã:*\n{rewards_text}"
        )
        await message.answer(text, parse_mode="Markdown", reply_markup=profile_menu_keyboard)
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_keyboard)

# ============================================================


# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ê–ó–î–ï–õ–ê –ú–ï–ù–Æ –ú–û–ò –ü–†–ò–í–´–ß–ö–ò!
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏¬ª
@router.message(F.text == "–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏")
async def my_habits_handler(message: types.Message):
    user_id = message.from_user.id
    habits = get_user_habits(user_id)  # –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (id, habit, frequency)
    
    daily = []
    alternate = []
    custom_dict = {}  # –∫–ª—é—á: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–Ω–µ–π, –∑–Ω–∞—á–µ–Ω–∏–µ: —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫
    text = "" # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é text, —á—Ç–æ–±—ã –æ–Ω–∞ —Ç–æ—á–Ω–æ –±—ã–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
    
    for h in habits:
        habit_text = h[1].strip()
        # –ü—Ä–∏–≤–æ–¥–∏–º –ø—Ä–∏–≤—ã—á–∫—É —Ç–∞–∫, —á—Ç–æ–±—ã –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –±—ã–ª–∞ –∑–∞–≥–ª–∞–≤–Ω–æ–π:
        habit_text = habit_text.capitalize()
        freq = h[2].strip().lower()
        if freq == "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ":
            daily.append(habit_text)
        elif freq == "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Å—Ä–µ–¥–∞, –ø—è—Ç–Ω–∏—Ü–∞, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
            alternate.append(habit_text)
        else:
            # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–Ω–µ–π.
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º, –æ–±—Ä–µ–∑–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –∑–∞–≥–ª–∞–≤–Ω–æ–π.
            days = [day.strip().capitalize() for day in freq.split(",")]
            normalized_freq = ", ".join(days)
            if normalized_freq not in custom_dict:
                custom_dict[normalized_freq] = []
            custom_dict[normalized_freq].append(habit_text)
    
    output_lines = []
    if daily:
        output_lines.append("*üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏:*")
        for i, habit in enumerate(daily, start=1):
            output_lines.append(f"{i}. {habit}")
        output_lines.append("=========================")
    if alternate:
        output_lines.append("*üìÜ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫/–°—Ä–µ–¥–∞/–ü—è—Ç–Ω–∏—Ü–∞/–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ:*")
        for i, habit in enumerate(alternate, start=1):
            output_lines.append(f"{i}. {habit}")
        output_lines.append("=========================")
    if custom_dict:
        output_lines.append("üìå –ü—Ä–∏–≤—ã—á–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–Ω—è–º:")
        for freq, habit_list in custom_dict.items():
            output_lines.append(f"*{freq}:*")
            for i, habit in enumerate(habit_list, start=1):
                output_lines.append(f"{i}) {habit}")
            output_lines.append("-------------------------")
        output_lines.append("")
    if not output_lines:
        output_lines.append("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.")
    
    text = "\n".join(output_lines)
    await message.answer(text, parse_mode="Markdown", reply_markup=my_habits_menu_keyboard)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É¬ª
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
async def add_habit_from_my_habits(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å (–≤–≤–æ–¥–∏ –ø–æ –æ–¥–Ω–æ–π; –Ω–∞–ø–∏—à–∏ '—Å—Ç–æ–ø' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(HabitsStates.waiting_for_habit)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:
@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
async def delete_habit_prompt(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(DeleteHabitStates.waiting_for_habit_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:
@router.message(DeleteHabitStates.waiting_for_habit_name)
async def process_delete_habit(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    habit_name = message.text.strip()
    deleted = delete_habit(user_id, habit_name)
    if deleted:
        await message.answer(f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' —É–¥–∞–ª–µ–Ω–∞.", reply_markup=my_habits_menu_keyboard)
    else:
        await message.answer(f"–ü—Ä–∏–≤—ã—á–∫–∏ '{habit_name}' –Ω–µ—Ç –≤ —Ç–≤–æ–µ–º —Å–ø–∏—Å–∫–µ.", reply_markup=my_habits_menu_keyboard)
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª –≤ –º–µ–Ω—é –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
@router.message(F.text == "–ù–∞–∑–∞–¥")
async def my_habits_back_handler(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)

# ============================================================

# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ê–ó–î–ï–õ–ê –ú–ï–ù–Æ –ó–û–ù–ê –ö–û–ú–§–û–†–¢–ê!
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–ó–æ–Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞¬ª
@router.message(F.text == "–ó–æ–Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞")
async def comfort_zone_handler(message: types.Message):
    user_id = message.from_user.id
    temptations = get_user_temptations(user_id)  # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (id, temptation)
    output_lines = []
    if temptations:
        output_lines.append("**–ó–æ–Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞:**")
        for i, temp in enumerate(temptations, start=1):
            # –ü—Ä–∏–≤–æ–¥–∏–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫ –∑–∞–≥–ª–∞–≤–Ω–æ–π
            t_text = temp[1].strip().capitalize()
            output_lines.append(f"{i}. {t_text}")
        output_lines.append("")
    else:
        output_lines.append("–í –ó–æ–Ω–µ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å–∫—É—à–µ–Ω–∏–π.")
    text = "\n".join(output_lines)
    await message.answer(text, parse_mode="Markdown", reply_markup=comfort_zone_menu_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–∫—É—à–µ–Ω–∏–π –≤ –º–µ–Ω—é –ó–æ–Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∏—Å–∫—É—à–µ–Ω–∏–µ")
async def add_temptation_prompt(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ –∏—Å–∫—É—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '—Å—Ç–æ–ø' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AddTemptationState.waiting_for_temptation)

@router.message(AddTemptationState.waiting_for_temptation)
async def process_add_temptation(message: types.Message, state: FSMContext):
    if message.text.strip().lower() == "—Å—Ç–æ–ø":
        await message.answer("–°–ø–∏—Å–æ–∫ –∏—Å–∫—É—à–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        # –í—ã–≤–æ–¥–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –º–µ–Ω—é –ó–æ–Ω—ã –∫–æ–º—Ñ–æ—Ä—Ç–∞
        await update_comfort_zone(message)
        return
    user_id = message.from_user.id
    temptation_text = message.text.strip()
    add_temptation(user_id, temptation_text)
    await message.answer(f"–ò—Å–∫—É—à–µ–Ω–∏–µ '{temptation_text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '—Å—Ç–æ–ø' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", reply_markup=ReplyKeyboardRemove())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–∫—É—à–µ–Ω–∏–π –≤ –º–µ–Ω—é –ó–æ–Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞
@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∏—Å–∫—É—à–µ–Ω–∏–µ")
async def delete_temptation_prompt(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ –∏—Å–∫—É—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(DeleteTemptationState.waiting_for_temptation_name)

@router.message(DeleteTemptationState.waiting_for_temptation_name)
async def process_delete_temptation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    temptation_name = message.text.strip()
    deleted = delete_temptation(user_id, temptation_name)
    if deleted:
        await message.answer(f"–ò—Å–∫—É—à–µ–Ω–∏–µ '{temptation_name}' —É–¥–∞–ª–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer(f"–ò—Å–∫—É—à–µ–Ω–∏—è '{temptation_name}' –Ω–µ—Ç –≤ —Ç–≤–æ–µ–º —Å–ø–∏—Å–∫–µ.", reply_markup=ReplyKeyboardRemove())
    await state.clear()
    # –í—ã–≤–æ–¥–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –º–µ–Ω—é –ó–æ–Ω—ã –∫–æ–º—Ñ–æ—Ä—Ç–∞
    await update_comfort_zone(message)



# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å–∫—É—à–µ–Ω–∏–π (–ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è)
async def update_comfort_zone(message: types.Message):
    user_id = message.from_user.id
    temptations = get_user_temptations(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–∫—É—à–µ–Ω–∏–π (id, temptation)
    output_lines = []
    if temptations:
        output_lines.append("**–ó–æ–Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞:**")
        for i, temp in enumerate(temptations, start=1):
            # –ü—Ä–∏–≤–æ–¥–∏–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫ –∑–∞–≥–ª–∞–≤–Ω–æ–π
            t_text = temp[1].strip().capitalize()
            output_lines.append(f"{i}. {t_text}")
        output_lines.append("")
    else:
        output_lines.append("–í –ó–æ–Ω–µ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å–∫—É—à–µ–Ω–∏–π.")
    text = "\n".join(output_lines)
    await message.answer(text, parse_mode="Markdown", reply_markup=comfort_zone_menu_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ–º –º–µ–Ω—é –∏–∑ –º–µ–Ω—é –ó–æ–Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞
@router.message(F.text == "–ù–∞–∑–∞–¥")
async def comfort_zone_back_handler(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)

# ============================================================


# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ê–ó–î–ï–õ–ê –ú–ï–ù–Æ –ù–∞—Å—Ç—Ä–æ–π–∫–∏!
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:
@router.message(lambda message: message.text == "–ù–∞–∑–∞–¥" and message.chat.id)
async def settings_back_handler(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_handler(message: types.Message):
    await message.answer("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫", reply_markup=settings_menu_keyboard)

# dp.include_router(router)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ FAQ
@router.message(F.text == "üìñ FAQ")
async def faq_handler(message: types.Message):
    faq_text = (
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤–Ω–µ–¥—Ä–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, "
        "–º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏ –∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏! \n\n"
        "–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫ ‚Äì —ç—Ç–æ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –≤—ã–∑–æ–≤. –ó–¥–µ—Å—å –Ω–µ—Ç –º–µ—Å—Ç–∞ –æ—Ç–≥–æ–≤–æ—Ä–∫–∞–º –∏ —Å–ª–∞–±–æ—Å—Ç—è–º. –õ–∏–±–æ —Ç—ã –¥–µ—Ä–∂–∏—à—å —Å–ª–æ–≤–æ, –ª–∏–±–æ –ø–ª–∞—Ç–∏—à—å —Ü–µ–Ω—É –∑–∞ —Å—Ä—ã–≤.\n\n"
        "üìå –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n"
        "1Ô∏è‚É£ –°–æ–∑–¥–∞—ë—à—å –ø—Ä–∏–≤—ã—á–∫–∏ ‚Äì —Å–∞–º —Ä–µ—à–∞–µ—à—å, –∫–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–¥–∞—ë—à—å –¥–ª—è —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏.\n"
        "2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ—à—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äì –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–∞—Å—Ç —Ç–µ–±–µ –∑–∞–±—ã—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö.\n"
        "3Ô∏è‚É£ –û—Ç—á–∏—Ç—ã–≤–∞–µ—à—å—Å—è –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π ‚Äì –∫–∞–∂–¥—ã–π –≤–µ—á–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–ø—Ä–∞–≤–∏–ª—Å—è –∏–ª–∏ –Ω–µ—Ç?\n"
        "4Ô∏è‚É£ –ñ–∏–≤—ë—à—å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º ‚Äì –µ—Å–ª–∏ —Å–æ—Ä–≤–∞–ª—Å—è, –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –∂–¥—É—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. –•–æ—á–µ—à—å –ª—é–±–∏–º—ã–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è? –¢–æ–≥–¥–∞ –¥–µ—Ä–∂–∏—Å—å!\n"
        "5Ô∏è‚É£ –ú–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –ø–æ–±–ª–∞–∂–∫—É ‚Äì –≤ –º–∞–≥–∞–∑–∏–Ω–µ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–∞–±–ª–µ–Ω–∏—è, –Ω–æ –æ–Ω–∏ —Å—Ç–æ—è—Ç –¥–æ—Ä–æ–≥–æ. –°–≤–æ–±–æ–¥–∞ –∏–º–µ–µ—Ç —Ü–µ–Ω—É!\n\n"
        "üî• –ß–µ–º –æ–Ω–æ –∫—Ä—É—Ç–æ–µ?\n"
        "‚úî –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –±–µ–∑ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–æ–≤ ‚Äì —Ç—ã –ª–∏–±–æ –≤—ã–ø–æ–ª–Ω—è–µ—à—å, –ª–∏–±–æ –ø–ª–∞—Ç–∏—à—å –∑–∞ —Å–ª–∞–±–æ—Å—Ç—å. –ù–∏–∫–∞–∫–æ–≥–æ —Å–∞–º–æ–æ–±–º–∞–Ω–∞!\n"
        "‚úî –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥ –∏ —à—Ç—Ä–∞—Ñ–æ–≤ ‚Äì –≤—ã–¥–µ—Ä–∂–∞–ª —Å–µ—Ä–∏—é –¥–Ω–µ–π –±–µ–∑ —Å—Ä—ã–≤–æ–≤? –ü–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã! –ü—Ä–æ–≤–∞–ª–∏–ª—Å—è? –ì–æ—Ç–æ–≤—å—Å—è –∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º.\n"
        "‚úî –ö–æ–Ω—Ç—Ä–æ–ª—å –∏—Å–∫—É—à–µ–Ω–∏–π ‚Äì —Ö–æ—á–µ—à—å –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è? –¢–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ!\n"
        "‚úî –°–æ—Ä–≤–∞–ª—Å—è? –ë–æ—Ç —Å–ª–µ–¥–∏—Ç –∑–∞ —Ç–æ–±–æ–π! ‚Äì –µ—Å–ª–∏ —Ç—ã –Ω–∞—Ä—É—à–∏—à—å –ø—Ä–∞–≤–∏–ª–∞, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —ç—Ç–æ –æ—Ç–º–µ—Ç–∏—Ç ‚Äì –æ–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç —Ç–µ–±–µ –∂–∏–∑–Ω—å.\n"
        "‚úî –í—ã—Ö–æ–¥–Ω–æ–π –∑–∞ –º–æ–Ω–µ—Ç—ã ‚Äì –Ω–∞–∫–æ–ø–∏–ª —Ä–µ—Å—É—Ä—Å—ã? –ú–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å —Å–µ–±–µ –¥–µ–Ω—å –æ—Ç–¥—ã—Ö–∞, –Ω–æ –ø–æ–º–Ω–∏ ‚Äì —Ö–∞–ª—è–≤–∞ —Ç—É—Ç –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è.\n"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç FAQ –∏ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ù–∞—Å—Ç—Ä–æ–µ–∫
    await message.answer(faq_text, reply_markup=settings_menu_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª –≤ –º–µ–Ω—é –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –ù–∞—Å—Ç—Ä–æ–µ–∫
@router.message(lambda message: message.text == "–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º" and message.chat.id)
async def reminders_back_handler(message: types.Message):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ù–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=settings_menu_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@router.message(F.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def reminders_handler(message: types.Message):
    await message.answer("–ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", reply_markup=reminders_menu_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback‚Äë–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (1, 3, 5 —Ä–∞–∑)
@router.callback_query(lambda c: c.data in ["notif_1", "notif_3", "notif_5"])
async def set_notif_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    option = callback.data
    if option == "notif_1":
        count = 1 
        schedule_times = ["15:00"]
    elif option == "notif_3":
        count = 3
        schedule_times = ["10:00", "15:00", "20:00"]
    elif option == "notif_5":
        count = 5
        schedule_times = ["10:00", "12:00", "15:00", "18:00", "20:00"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ
    set_notifications(user_id, count)
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    unschedule_notifications(user_id)
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    schedule_notifications(user_id, schedule_times)
    # –ü–†–û–í–ï–†–ö–ê_1
    #await callback.message.edit_reply_markup(reply_markup=None)
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise
    await bot.send_message(user_id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ({count} —Ä–∞–∑ –≤ –¥–µ–Ω—å).", reply_markup=reminders_menu_keyboard)
    await callback.answer()

    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    set_notifications(user_id, count)
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ APScheduler,
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏" –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Å—ã.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –º—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ.
    
    # –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ edit_reply_markup –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try/except
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —á–∏—Å—Ç–∞—è
        pass
    await bot.send_message(user_id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ({count} —Ä–∞–∑ –≤ –¥–µ–Ω—å).", reply_markup=reminders_menu_keyboard)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π):
@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def notif_back_handler(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=reminders_menu_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è¬ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
@router.message(F.text == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def notifications_status_handler(message: types.Message):
    user_id = message.from_user.id
    notif_count = get_notifications(user_id)
    if notif_count == 0:
        status_text = "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" –∏ "–ù–∞–∑–∞–¥"
        notif_menu_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
    else:
        status_text = f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å {notif_count} —Ä–∞–∑(–∞) –≤ –¥–µ–Ω—å."
        # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notif_menu_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
    await message.answer(status_text, reply_markup=notif_menu_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è¬ª:
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def add_notifications_handler(message: types.Message):
    await message.answer(
        "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–± –±–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–ª —Ç–µ–±–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏?",
        reply_markup=notif_options_keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è¬ª:
@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def delete_notif_handler(message: types.Message):
    user_id = message.from_user.id
    set_notifications(user_id, 0)
    await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.", reply_markup=reminders_menu_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è¬ª:
@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è")
async def change_wakeup_prompt(message: types.Message, state: FSMContext):
    example_text = "–ù–∞–ø—Ä–∏–º–µ—Ä: 07:00"
    await message.answer(f"–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è? –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM. {example_text}", reply_markup=ReplyKeyboardRemove())
    await state.set_state(WakeUpStates.waiting_for_time)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
@router.message(WakeUpStates.waiting_for_time)
async def process_wakeup_time(message: types.Message, state: FSMContext):
    import re
    time_str = message.text.strip()
    if not re.match(r"^\d{2}:\d{2}$", time_str):
         await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä: 07:00")
         return
    try:
         hour, minute = map(int, time_str.split(":"))
         if not (0 <= hour < 24 and 0 <= minute < 60):
              raise ValueError
    except ValueError:
         await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. –ü—Ä–∏–º–µ—Ä: 07:00")
         return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_wakeup_time(message.from_user.id, time_str)
    # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    schedule_daily_tasks(message.from_user.id, time_str)
    await message.answer("–í—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.", reply_markup=reminders_menu_keyboard)
    await state.clear()



HARD_CONTROL_MESSAGES = [
    "–ù–∞–¥–µ—é—Å—å, —Ç—ã –Ω–µ –Ω–∞—Ä—É—à–∞–µ—à—å –Ω–∞—à–∏ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–æ–±–ª—é–¥–∞–µ—à—å –¥–µ–Ω—å –±–µ–∑ –∏—Å–∫—É—à–µ–Ω–∏–π?",
    "–ü–æ–º–Ω–∏, —Å–µ–≥–æ–¥–Ω—è –Ω–µ–ª—å–∑—è –ø–æ–¥–¥–∞–≤–∞—Ç—å—Å—è –∏—Å–∫—É—à–µ–Ω–∏—è–º. –ö–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?",
    "–î–µ–Ω—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º ‚Äì —Å–µ—Ä—å–µ–∑–Ω–æ–µ –¥–µ–ª–æ. –¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è?",
    "–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å –∏—Å–ø—ã—Ç–∞–Ω–∏–π. –¢—ã –¥–æ —Å–∏—Ö –ø–æ—Ä —Å–æ–±–ª—é–¥–∞–µ—à—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–ª–∏ –∏—Å–∫—É—à–µ–Ω–∏–µ –≤–∑—è–ª–æ –≤–µ—Ä—Ö?",
    "–£ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è —Ä–µ–∂–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–Ω—è. –ó–∞–ø—Ä–µ—Ç–Ω—ã–π –ø–ª–æ–¥ —Å–ª–∞–¥–æ–∫, –Ω–æ —Ç—ã –∂–µ —Å–∏–ª—å–Ω–µ–µ, –≤–µ—Ä–Ω–æ? –ù–µ –ø–æ–¥–¥–∞–ª—Å—è —Å–æ–±–ª–∞–∑–Ω—É? –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ!",
    "–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –Ω–æ –∑–∞–≤—Ç—Ä–∞ —Ç—ã —Å–∫–∞–∂–µ—à—å —Å–µ–±–µ ‚Äú—Å–ø–∞—Å–∏–±–æ‚Äù. –î–µ—Ä–∂–∏—à—å—Å—è –∏–ª–∏ —É–∂–µ –Ω–µ—Ç?",
    "–¢—ã –æ–±–µ—â–∞–ª –¥–µ—Ä–∂–∞—Ç—å—Å—è –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è —Å–≤–æ–∏ –∏—Å–∫—É—à–µ–Ω–∏—è. –¢—ã —Å–¥–µ—Ä–∂–∞–ª —Å–≤–æ—ë —Å–ª–æ–≤–æ? –ò–ª–∏ –ø—Ä–∏—à–ª–æ—Å—å —Å—Ö–∏—Ç—Ä–∏—Ç—å?"
]


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è:
@router.message(F.text == "üî• –†–µ–∂–∏–º –∫–æ–Ω—Ç—Ä–æ–ª—è")
async def control_mode_prompt(message: types.Message):
    user_id = message.from_user.id
    current_mode = get_control_mode(user_id)  # —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –±–∞–∑—ã, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —Å—Ç—Ä–æ–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä "–º—è–≥–∫–∏–π" –∏–ª–∏ "–∂–µ—Å—Ç–∫–∏–π"
    # –°–æ–æ–±—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ
    await message.answer(
        f"–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –∫–æ–Ω—Ç—Ä–æ–ª—è: {current_mode.capitalize()}.\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π —Ä–µ–∂–∏–º —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:",
        reply_markup=control_mode_keyboard
    )


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback —Ä–µ–∂–∏–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è:
@router.callback_query(lambda c: c.data in ["control_mild", "control_strict"])
async def control_mode_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if callback.data == "control_mild":
        set_control_mode(user_id, "–º—è–≥–∫–∏–π")
        response_text = "–í—ã–±—Ä–∞–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∫–æ–Ω—Ç—Ä–æ–ª—è."
    else:
        set_control_mode(user_id, "–∂–µ—Å—Ç–∫–∏–π")
        response_text = "–í—ã–±—Ä–∞–Ω —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º –∫–æ–Ω—Ç—Ä–æ–ª—è."
    # –£–¥–∞–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ edit_reply_markup –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try/except
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —á–∏—Å—Ç–∞—è
        pass
    await bot.send_message(user_id, response_text, reply_markup=settings_menu_keyboard)
    await callback.answer()

# –§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ç—Ä–æ–ª–µ —É—Ç—Ä–æ–º (–ø–æ—Å–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
async def send_control_morning_message(user_id: int):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äì "–î–µ–Ω—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"
    from database import get_user_profile
    profile = get_user_profile(user_id)
    if not profile:
        return
    status = profile[2]  # –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ 3-–π —Å—Ç–æ–ª–±–µ—Ü ‚Äì —Å—Ç–∞—Ç—É—Å
    if status != "–î–µ–Ω—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º":
        return
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–∫—É—à–µ–Ω–∏–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    temptations = get_user_temptations(user_id)
    if not temptations:
        restrictions_text = "–ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
    else:
        restrictions_lines = []
        for i, temp in enumerate(temptations, start=1):
            restrictions_lines.append(f"{i}. {temp[1].strip().capitalize()}")
        restrictions_text = "\n".join(restrictions_lines)
    message_text = f"‚ùå –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–Ω—è!\n–í—á–µ—Ä–∞ —Ç—ã —Å–æ—Ä–≤–∞–ª—Å—è ‚Äì —Ç–∞–∫ –±—ã–≤–∞–µ—Ç. –ì–ª–∞–≤–Ω–æ–µ ‚Äì —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã. –°–µ–≥–æ–¥–Ω—è –±–µ–∑ –ø–æ–±–ª–∞–∂–µ–∫, –Ω–æ –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –Ω–æ–≤—ã–π –¥–µ–Ω—å.\n\n–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å –∏—Å–∫–ª—é—á–∞–µ—Ç:\n{restrictions_text}"
    try:
        await bot.send_message(user_id, message_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# –§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º (—Å–æ–±–ª—é–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)
async def send_hard_control_message(user_id: int):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞–∂–∞–ª "–Ø —Å–æ—Ä–≤–∞–ª—Å—è" —Å–µ–≥–æ–¥–Ω—è, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if get_control_failed(user_id) == 1:
        return
    text_variant = random.choice(HARD_CONTROL_MESSAGES)
    try:
        await bot.send_message(user_id, text_variant, reply_markup=control_response_keyboard)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è (–∂–µ—Å—Ç–∫–∏–π —Ä–µ–∂–∏–º) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback‚Äë–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤:
@router.callback_query(lambda c: c.data in ["control_hold", "control_fail"])
async def control_response_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if callback.data == "control_fail":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ä–≤–∞–ª—Å—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
        set_control_failed(user_id, 1)
        # –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ edit_reply_markup –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try/except
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except TelegramBadRequest:
            # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —á–∏—Å—Ç–∞—è
            pass
        await bot.send_message(user_id, "–û—á–µ–Ω—å –∂–∞–ª—å. –°–µ–≥–æ–¥–Ω—è —Ç—ã —Å–æ—Ä–≤–∞–ª—Å—è, –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–µ–Ω—å –ø—Ä–æ–¥–ª–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ—Ä–∂–∏—Ç—Å—è
        # –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ edit_reply_markup –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try/except
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except TelegramBadRequest:
            # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —á–∏—Å—Ç–∞—è
            pass
        await bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!", reply_markup=main_menu_keyboard)
    await callback.answer()


# –§—É–Ω–∫—Ü–∏—è —Ä–µ–∂–∏–º –∫–æ–Ω—Ç—Ä–æ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ "–º—è–≥–∫–∏–π", –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 19:00
async def send_mild_control_message(user_id: int):
    # –í –º—è–≥–∫–æ–º —Ä–µ–∂–∏–º–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    try:
        await bot.send_message(user_id, "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–π—Å—Ç–≤—É–µ—Ç –º—è–≥–∫–∏–π —Ä–µ–∂–∏–º –∫–æ–Ω—Ç—Ä–æ–ª—è. –î–µ—Ä–∂–∏—Å—å —Å–≤–æ–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤!", reply_markup=main_menu_keyboard)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º—è–≥–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—É–ø–∏–≤—à–µ–≥–æ —Ç–æ–≤–∞—Ä, –æ—Ç–º–µ–Ω—è—é—â–∏–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–µ–Ω—å.
def unschedule_control_mode(user_id: int):
    for job in scheduler.get_jobs():
        if job.id.startswith(f"control_{user_id}_"):
            scheduler.remove_job(job.id)


# –í–∞—Ä–∏–∞–Ω—Ç—ã —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
RANDOM_CHALLENGES = [
    "100 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –∏ –æ—Ç–∂–∏–º–∞–Ω–∏–π –∑–∞ –¥–µ–Ω—å (–º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –ø–æ–¥—Ö–æ–¥—ã)",
    "–ü–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ–¥—É –≤–µ—Å—å –¥–µ–Ω—å (–±–µ–∑ —á–∞—è, –∫–æ—Ñ–µ, —Å–ª–∞–¥–∫–∏—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤)",
    "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Ç—è–∂–∫—É —É—Ç—Ä–æ–º –∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
    "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –¥—É—à",
    "–ó–∞ —á–∞—Å –¥–æ —Å–Ω–∞ –≤—ã–∫–ª—é—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω (—á–∞—Å –±–µ–∑ —ç–∫—Ä–∞–Ω–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º)",
    "–°–¥–µ–ª–∞—Ç—å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ (4-7-8 –∏–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ)",
    "–†–∞–∑–æ–±—Ä–∞—Ç—å –æ–¥–∏–Ω '–±–∞—Ä–¥–∞–∫' (–∑–∞–º–µ—Ç–∫–∏, –ø–æ—á—Ç—É, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∫–∏)",
    "–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é",
    "–í—ã—É—á–∏—Ç—å 15 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ",
    "–ü—Ä–æ—á–∏—Ç–∞—Ç—å 20 —Å—Ç—Ä–∞–Ω–∏—Ü –∫–Ω–∏–≥–∏",
    "–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ —Å–∞–º–æ–º—É —Å–µ–±–µ –≤ –±—É–¥—É—â–µ–µ",
    "–°–¥–µ–ª–∞—Ç—å '—Ü–∏—Ñ—Ä–æ–≤—É—é —É–±–æ—Ä–∫—É' (—Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω, —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã)",
    "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø—Ä–µ–¥—Å—Ç–∞–≤—å —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å)",
    "–†–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã–µ",
    "–°–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ 10 –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –∏–∑—É—á–∏—Ç—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å",
    "–ó–∞–¥–∞—Ç—å –∫–æ–º—É-—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π, –Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö–∞–∫–∞—è –∫–Ω–∏–≥–∞ –∏–∑–º–µ–Ω–∏–ª–∞ —Ç–≤–æ—é –∂–∏–∑–Ω—å?')",
    "–í—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ '—Å–ª–∞–±–æ–µ –º–µ—Å—Ç–æ' –≤ –∂–∏–∑–Ω–∏ –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–∏–Ω–∏-–ø–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏—è",
    "–°–¥–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ, –Ω–µ –æ–∂–∏–¥–∞—è –Ω–∏—á–µ–≥–æ –≤–∑–∞–º–µ–Ω",
    "–ü–æ–≥—É–ª—è—Ç—å 1 —á–∞—Å"
]


# –§—É–Ω–∫—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –†–∞–Ω–¥–æ–º—ã–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
@router.message(F.text == "üé≤ –†–∞–Ω–¥–æ–º–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏")
async def challenges_settings_handler(message: types.Message):
    user_id = message.from_user.id
    enabled = get_challenges_enabled(user_id)
    if enabled == 1:
        status_text = "–†–∞–Ω–¥–æ–º–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ —Å–µ–π—á–∞—Å –≤–∫–ª—é—á–µ–Ω—ã."
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂–∏")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")]
            ],
            resize_keyboard=True
        )
    else:
        status_text = "–†–∞–Ω–¥–æ–º–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ —Å–µ–π—á–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω—ã."
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂–∏")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")]
            ],
            resize_keyboard=True
        )
    await message.answer(status_text, reply_markup=keyboard)


@router.message(F.text == "–í–∫–ª—é—á–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂–∏")
async def enable_challenges_handler(message: types.Message):
    user_id = message.from_user.id
    set_challenges_enabled(user_id, 1)
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    schedule_random_challenge_for_user(user_id)
    await message.answer("–†–∞–Ω–¥–æ–º–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –≤–∫–ª—é—á–µ–Ω—ã. –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ä–∞–∑ –≤ 3-7 –¥–Ω–µ–π –≤ —É—Ç—Ä–µ–Ω–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.", reply_markup=settings_menu_keyboard)

@router.message(F.text == "–û—Ç–∫–ª—é—á–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂–∏")
async def disable_challenges_handler(message: types.Message):
    user_id = message.from_user.id
    set_challenges_enabled(user_id, 0)
    unschedule_random_challenge(user_id)
    await message.answer("–†–∞–Ω–¥–æ–º–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.", reply_markup=settings_menu_keyboard)

@router.message(lambda message: message.text == "–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")
async def challenges_back_handler(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ù–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=settings_menu_keyboard)


# –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ (–¥–æ–ª–∂–Ω–∞ –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–æ—Ç 3 –¥–æ 7 –¥–Ω–µ–π) –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É)
def schedule_random_challenge_for_user(user_id: int):
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for job in scheduler.get_jobs():
        if job.id.startswith(f"challenge_{user_id}_"):
            scheduler.remove_job(job.id)
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 3 –¥–æ 7 –¥–Ω–µ–π
    days_interval = random.randint(3, 7)
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    wakeup_time = get_wakeup_time(user_id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É "HH:MM"
    if not wakeup_time:
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        return
    hour, minute = map(int, wakeup_time.split(":"))
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: —Å–µ–≥–æ–¥–Ω—è + days_interval, –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    # APScheduler –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ cron, –Ω–æ –¥–ª—è —Ä–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞—á –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å date trigger
    # –ó–¥–µ—Å—å —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–¥–∞—á—É —Å trigger="date"
    run_date = (datetime.datetime.now() + datetime.timedelta(days=days_interval)).replace(hour=hour, minute=minute, second=0, microsecond=0)
    job_id = f"challenge_{user_id}"
    scheduler.add_job(send_random_challenge, "date", run_date=run_date, args=[user_id], id=job_id, timezone="Europe/Moscow")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞
def get_random_challenge() -> str:
    return random.choice(RANDOM_CHALLENGES)
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞
async def send_random_challenge(user_id: int):
    challenge_text = get_random_challenge()
    # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —á–µ–ª–ª–µ–Ω–¥–∂ –≤ –±–∞–∑–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–Ω—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ; –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        "–°–µ–≥–æ–¥–Ω—è —è –¥–æ–±–∞–≤–∏–ª —Ç–µ–±–µ —á–µ–ª–ª–µ–Ω–¥–∂, –æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é:\n"
        f"- {challenge_text}\n\n"
        "–ï—Å–ª–∏ —Ç—ã –≤—ã–ø–æ–ª–Ω–∏—à—å —á–µ–ª–ª–µ–Ω–¥–∂, —Ç–µ–±–µ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã 15 –º–æ–Ω–µ—Ç –∑–∞ –¥–µ–Ω—å!"
    )
    try:
        await bot.send_message(user_id, message_text)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ –ø–æ–ª–µ challenge_assigned_date
        today_str = datetime.datetime.now().strftime("%Y-%m-%d")
        set_challenge_assigned_date(user_id, today_str)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏, –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–Ω–¥–æ–º–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    if get_challenges_enabled(user_id) == 1:
        schedule_random_challenge_for_user(user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
def unschedule_random_challenge(user_id: int):
    for job in scheduler.get_jobs():
        if job.id.startswith(f"challenge_{user_id}"):
            scheduler.remove_job(job.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ 
@router.message(F.text == "üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è")
async def support_author_handler(message: types.Message):
    donat_text = (
        "*–°–ø–∞—Å–∏–±–æ —á—Ç–æ —Ä–µ—à–∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è!* ‚ù§Ô∏è\n\n"
        "üí≥ *–°–ø–æ—Å–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*\n"
        "- [Donat](https://www.donationalerts.com/r/breadman_vl) - —Å–∞–π—Ç –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤.\n"
        "- USDT (Ethereum, ERC-20): `0x8920eecFbe78045852D464D92F24d6d6CB9509Cf`\n"
        "- USDT (TRC-20): `TVcGfCSUyX17bm2Ff1iZdjBeXnLfxbfgqu`\n"
        "- –¢-–ë–∞–Ω–∫: `5536 9137 8940 0328`\n\n"
        "üíé –°–æ–∑–¥–∞—Ç–µ–ª—å: [BreadMan](https://t.me/breadman96)"
    )
    await message.answer(
        donat_text, 
        parse_mode="Markdown", 
        disable_web_page_preview=True,
        reply_markup=settings_menu_keyboard
    )


dp.include_router(router)

async def handle_health(request):
    return web.Response(text="OK")

async def start_webserver():
    app = web.Application()
    app.router.add_get("/", handle_health)
    port = int(os.environ.get("PORT", 8000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    print(f"Health endpoint listening on port {port} (GET+HEAD /)")

async def main():
    # 2) –∑–∞–ø—É—Å–∫–∞–µ–º web‚Äë—Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–≤—ã–º
    await start_webserver()
    # 3) –∑–∞—Ç–µ–º —Å—Ç–∞—Ä—Ç—É–µ–º APScheduler, Telegram‚Äëpolling –∏ —Ç.–¥.
    scheduler.start()  # –¢–µ–ø–µ—Ä—å event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ –≤ 22:00
    scheduler.add_job(send_daily_check, "cron", hour=22, minute=00, id="daily_check")
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–æ—Ç–≤–µ—Ç–∞ –≤ 23:55
    scheduler.add_job(handle_no_response, "cron", hour=23, minute=55, id="daily_no_response") 
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –±–æ–Ω—É—Å–Ω—ã—Ö –º–æ–Ω–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–≥—Ä–∞–¥—ã)
    scheduler.add_job(daily_bonus_job, "cron", hour=0, minute=5, id="daily_bonus")
    await dp.start_polling(bot)

if __name__ == "__main__":
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    asyncio.run(main())
