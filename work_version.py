import logging
import asyncio
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from config import BOT_TOKEN
from database import init_db, add_user, sign_agreement, add_temptation

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º")]],
    resize_keyboard=True
)

sign_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")]],
    resize_keyboard=True
)

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class AgreementStates(StatesGroup):
    waiting_for_sign = State()

class ComfortZoneStates(StatesGroup):
    waiting_for_temptation = State()

@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
    add_user(user_id, username)
    
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üëã\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤–Ω–µ–¥—Ä–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏. "
        "–¢—ã –≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–≤–æ—é –∂–∏–∑–Ω—å?\n\n"
        "üìú –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ —Å —Å–æ–≤–µ—Å—Ç—å—é. "
        "–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤(–∞), —Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É."
    )
    await message.answer(text, reply_markup=start_keyboard)

@router.message(F.text == "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º")
async def view_agreement(message: types.Message, state: FSMContext):
    text = (
        f"üìù –Ø, {message.from_user.first_name}, –æ–±–µ—â–∞—é –ø–µ—Ä–µ–¥ —Å–∞–º–∏–º —Å–æ–±–æ–π —á–µ—Å—Ç–Ω–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞. "
        "–ï—Å–ª–∏ —è —Ö–æ—Ç—å —Ä–∞–∑ —Å–æ–≤—Ä—É, —Ç–æ –Ω–∞–∫–∞–∂—É —Å–µ–±—è –µ—â—ë —Å—Ç—Ä–æ–∂–µ. –ö–ª—è–Ω—É—Å—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –∏ –∂–µ–ª–µ–∑–Ω–æ–π –≤–æ–ª–µ–π!\n\n"
        "–î–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É!"
    )
    await message.answer(text, reply_markup=sign_keyboard)
    await state.set_state(AgreementStates.waiting_for_sign)

@router.message(AgreementStates.waiting_for_sign, F.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")
async def sign_agreement_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    sign_agreement(user_id)
    await message.answer(
        "üî• –°–£–ü–ï–†! –¢–µ–ø–µ—Ä—å —Ç—ã –≤ –∏–≥—Ä–µ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–≤–æ—é –Ω–æ–≤—É—é –∂–∏–∑–Ω—å!\n\n"
        "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –ó–æ–Ω—ã –∫–æ–º—Ñ–æ—Ä—Ç–∞.\n"
        "–ö–∞–∫–æ–µ –∏—Å–∫—É—à–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å? (–ù–∞–ø–∏—à–∏ '—Å—Ç–æ–ø', —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å)",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()
    await state.set_state(ComfortZoneStates.waiting_for_temptation)

@router.message(ComfortZoneStates.waiting_for_temptation, F.text.casefold() == "—Å—Ç–æ–ø")
async def finish_comfort_zone(message: types.Message, state: FSMContext):
    await message.answer("–ó–æ–Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–≤—ã—á–µ–∫.")
    await state.clear()

@router.message(ComfortZoneStates.waiting_for_temptation)
async def process_temptation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    temptation = message.text.strip()
    add_temptation(user_id, temptation)
    await message.answer(f"–ò—Å–∫—É—à–µ–Ω–∏–µ ¬´{temptation}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ. –î–æ–±–∞–≤—å —Å–ª–µ–¥—É—é—â–µ–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '—Å—Ç–æ–ø' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

dp.include_router(router)

async def main():
    await dp.start_polling(Bot(token=BOT_TOKEN))

if __name__ == "__main__":
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    asyncio.run(main())
